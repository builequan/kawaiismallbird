# Standalone Dockerfile that runs PostgreSQL during build for static generation
FROM node:20-alpine AS deps
WORKDIR /app
COPY ./kawaiitorichan/package.json ./kawaiitorichan/pnpm-lock.yaml ./
RUN corepack enable pnpm && pnpm install --frozen-lockfile

FROM postgres:15-alpine AS database
# Create empty database for build
ENV POSTGRES_USER=build
ENV POSTGRES_PASSWORD=build
ENV POSTGRES_DB=build
ENV POSTGRES_HOST_AUTH_METHOD=trust

FROM node:20-alpine AS builder
WORKDIR /app

# Install PostgreSQL client
RUN apk add --no-cache postgresql-client

COPY --from=deps /app/node_modules ./node_modules
COPY kawaiitorichan/ .

# Remove any local env files
RUN rm -f .env .env.local .env.production.local

# Create build environment
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV DATABASE_URI=postgresql://build:build@localhost:5432/build
ENV PAYLOAD_SECRET=build_time_secret_will_be_replaced_at_runtime_minimum_32_chars
ENV NEXT_PUBLIC_SERVER_URL=http://localhost:3000

# Start PostgreSQL in background for build
RUN apk add --no-cache postgresql15 && \
    mkdir -p /run/postgresql && \
    chown postgres:postgres /run/postgresql && \
    su postgres -c 'initdb -D /var/lib/postgresql/data' && \
    su postgres -c 'pg_ctl -D /var/lib/postgresql/data -l /var/lib/postgresql/logfile start' && \
    sleep 5 && \
    su postgres -c 'createdb build' && \
    corepack enable pnpm && \
    pnpm build || true && \
    su postgres -c 'pg_ctl -D /var/lib/postgresql/data stop'

FROM node:20-alpine AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copy built application
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Copy database initialization files
COPY --from=builder /app/init-db.sh ./
COPY --from=builder /app/force-init-db.sh ./
COPY --from=builder /app/init-bird-production.sh ./
COPY --from=builder /app/schema.sql ./
COPY --from=builder /app/essential_data.sql ./
COPY --from=builder /app/init-full-bird-content.sql ./

# Copy runtime scripts
COPY --from=builder /app/docker-entrypoint.sh ./
COPY --from=builder /app/server-wrapper.js ./

# Install PostgreSQL client
USER root
RUN apk add --no-cache postgresql-client
RUN chmod +x ./docker-entrypoint.sh ./init-db.sh ./force-init-db.sh ./init-bird-production.sh || true

USER nextjs

EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME=0.0.0.0

HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})" || exit 1

ENTRYPOINT ["./docker-entrypoint.sh"]