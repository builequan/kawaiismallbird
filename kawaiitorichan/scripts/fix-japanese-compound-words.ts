#!/usr/bin/env tsx
/**
 * Comprehensive fix for Japanese compound word breaking in links
 * 1. Removes all broken/partial links
 * 2. Reapplies links with proper compound word detection
 */

import { getPayload } from 'payload'
import configPromise from '@payload-config'

// Comprehensive dictionary of Japanese compound words in golf
const COMPOUND_WORDS = {
  // Score-related compounds
  '„Çπ„Ç≥„Ç¢': ['„Çπ„Ç≥„Ç¢„Ç´„Éº„Éâ', '„Çπ„Ç≥„Ç¢„É™„É≥„Ç∞', '„Çπ„Ç≥„Ç¢„Éú„Éº„Éâ', '„Çπ„Ç≥„Ç¢„É°„Ç§„ÇØ', '„Çπ„Ç≥„Ç¢„Ç¢„ÉÉ„Éó'],

  // Player-related compounds
  '„Éó„É¨„Éº': ['„Éó„É¨„Éº„É§„Éº', '„Éó„É¨„Éº„Çπ„Çø„Ç§„É´', '„Éó„É¨„Éº„Ç™„Éï', '„Éó„É¨„Éº„Ç§„É≥„Ç∞'],
  '„Éó„É¨„Ç§': ['„Éó„É¨„Ç§„É§„Éº', '„Éó„É¨„Ç§„É≥„Ç∞'],

  // Golf-related compounds
  '„Ç¥„É´„Éï': ['„Ç¥„É´„Éï„Ç°„Éº', '„Ç¥„É´„ÉïÂ†¥', '„Ç¥„É´„Éï„ÇØ„É©„Éñ', '„Ç¥„É´„Éï„Éú„Éº„É´', '„Ç¥„É´„Éï„Éê„ÉÉ„Ç∞'],

  // Shot-related compounds
  '„Ç∑„Éß„ÉÉ„Éà': ['„Ç∑„Éß„ÉÉ„Éà„Ç¨„É≥', '„Ç∑„Éß„ÉÉ„Éà„É°„Éº„Ç´„Éº', '„Ç∑„Éß„ÉÉ„Éà„Çª„É¨„ÇØ„Ç∑„Éß„É≥'],
  '„Éë„ÉÉ„Éà': ['„Éë„ÉÉ„ÉÜ„Ç£„É≥„Ç∞', '„Éë„ÉÉ„Çø„Éº', '„Éë„ÉÉ„Éà„É©„Ç§„É≥'],

  // Club-related compounds
  '„ÇØ„É©„Éñ': ['„ÇØ„É©„Éñ„Éè„Ç¶„Çπ', '„ÇØ„É©„Éñ„Éï„Çß„Éº„Çπ', '„ÇØ„É©„Éñ„Éò„ÉÉ„Éâ', '„ÇØ„É©„Éñ„Çª„ÉÉ„Éà'],
  '„Ç¢„Ç§„Ç¢„É≥': ['„Ç¢„Ç§„Ç¢„É≥„Ç∑„Éß„ÉÉ„Éà', '„Ç¢„Ç§„Ç¢„É≥„Çª„ÉÉ„Éà'],
  '„Éâ„É©„Ç§„Éê„Éº': ['„Éâ„É©„Ç§„Éê„Éº„Ç∑„Éß„ÉÉ„Éà'],

  // Course-related compounds
  '„Ç≥„Éº„Çπ': ['„Ç≥„Éº„Çπ„Éû„Éç„Ç∏„É°„É≥„Éà', '„Ç≥„Éº„Çπ„É¨„Ç≥„Éº„Éâ', '„Ç≥„Éº„Çπ„É¨„Éº„Éà'],
  '„Ç∞„É™„Éº„É≥': ['„Ç∞„É™„Éº„É≥„Ç≠„Éº„Éë„Éº', '„Ç∞„É™„Éº„É≥„Éï„Ç£„Éº', '„Ç∞„É™„Éº„É≥„Çµ„Ç§„Éâ'],
  '„Éï„Çß„Ç¢„Ç¶„Çß„Ç§': ['„Éï„Çß„Ç¢„Ç¶„Çß„Ç§„Ç¶„ÉÉ„Éâ', '„Éï„Çß„Ç¢„Ç¶„Çß„Ç§„Éê„É≥„Ç´„Éº'],

  // Swing-related compounds
  '„Çπ„Ç§„É≥„Ç∞': ['„Çπ„Ç§„É≥„Ç∞„Éó„É¨„Éº„É≥', '„Çπ„Ç§„É≥„Ç∞„Çπ„Éî„Éº„Éâ', '„Çπ„Ç§„É≥„Ç∞„Ç¢„Éº„ÇØ'],
  '„Éê„ÉÉ„ÇØ': ['„Éê„ÉÉ„ÇØ„Çπ„Ç§„É≥„Ç∞', '„Éê„ÉÉ„ÇØ„Çπ„Éî„É≥'],

  // Other compounds
  '„Éú„Éº„É´': ['„Éú„Éº„É´„Éû„Éº„Ç´„Éº', '„Éú„Éº„É´„Éù„Ç∏„Ç∑„Éß„É≥'],
  '„É©„Ç¶„É≥„Éâ': ['„É©„Ç¶„É≥„Éâ„É¨„ÉÉ„Çπ„É≥'],
  '„Éè„É≥„Éá„Ç£': ['„Éè„É≥„Éá„Ç£„Ç≠„É£„ÉÉ„Éó'],
}

// Japanese particles that indicate word boundaries
const JAPANESE_PARTICLES = [
  '„Çí', '„Åå', '„ÅØ', '„Å´', '„Åß', '„Åã„Çâ', '„Åæ„Åß', '„Å®', '„ÇÇ', '„ÇÑ', '„ÅÆ',
  '„Å∏', '„Çà„Çä', '„Å®„Åó„Å¶', '„Å´„Å§„ÅÑ„Å¶', '„Å´„Åä„Åë„Çã'
]

/**
 * Check if a keyword at a position is part of a compound word
 */
function isPartOfCompoundWord(text: string, keyword: string, position: number): boolean {
  const compounds = COMPOUND_WORDS[keyword] || []

  for (const compound of compounds) {
    const keywordIndexInCompound = compound.indexOf(keyword)
    if (keywordIndexInCompound === -1) continue

    const compoundStartInText = position - keywordIndexInCompound

    // Check if compound fits in the text at this position
    if (compoundStartInText >= 0 && compoundStartInText + compound.length <= text.length) {
      const potentialCompound = text.substring(compoundStartInText, compoundStartInText + compound.length)
      if (potentialCompound === compound) {
        return true
      }
    }
  }

  return false
}

/**
 * Check if a character or string is a valid word boundary in Japanese
 */
function isValidBoundary(text: string, position: number): boolean {
  if (position <= 0 || position >= text.length) return true

  const char = text[position]

  // Check for punctuation and spaces
  if (/[„ÄÇ„ÄÅÔºÅÔºüÔºàÔºâ„Äå„Äç„Äé„Äè„Äê„Äë„Éª„Äú„ÄÄ\s\n\t,.!?()\[\]{}:;"'\-\/\\]/.test(char)) {
    return true
  }

  // Check for Japanese particles
  for (const particle of JAPANESE_PARTICLES) {
    if (text.substring(position, position + particle.length) === particle) {
      return true
    }
  }

  return false
}

/**
 * Remove all links (both broken and intact) from content
 */
function removeAllLinks(content: any): any {
  if (!content) return content

  const newContent = JSON.parse(JSON.stringify(content))

  function processNode(node: any): any {
    if (!node) return node

    // If this is a link, return its text content
    if (node.type === 'link') {
      const linkText = extractText(node).replace('üõí ', '') // Remove emoji prefix
      return {
        type: 'text',
        text: linkText,
        version: 1
      }
    }

    // Process children
    if (node.children && Array.isArray(node.children)) {
      const newChildren = []

      for (const child of node.children) {
        const processed = processNode(child)
        if (processed) {
          // If previous node is text and current is text, merge them
          const prev = newChildren[newChildren.length - 1]
          if (prev && prev.type === 'text' && processed.type === 'text') {
            prev.text += processed.text
          } else {
            newChildren.push(processed)
          }
        }
      }

      node.children = newChildren
    }

    return node
  }

  newContent.root = processNode(newContent.root)
  return newContent
}

function extractText(node: any): string {
  if (!node) return ''
  if (node.text) return node.text
  if (node.children && Array.isArray(node.children)) {
    return node.children.map(extractText).join('')
  }
  return ''
}

/**
 * Count links in content
 */
function countLinks(content: any): { internal: number; affiliate: number } {
  let internal = 0
  let affiliate = 0

  function traverse(node: any) {
    if (!node) return

    if (node.type === 'link') {
      if (node.fields?.linkType === 'internal') {
        internal++
      } else {
        affiliate++
      }
    }

    if (node.children && Array.isArray(node.children)) {
      node.children.forEach(traverse)
    }
  }

  if (content?.root) {
    traverse(content.root)
  }

  return { internal, affiliate }
}

async function main() {
  console.log('üîß Fixing Japanese Compound Word Breaking')
  console.log('=' .repeat(60))
  console.log('')
  console.log('üìã This comprehensive fix will:')
  console.log('   1. Remove ALL existing links (broken and intact)')
  console.log('   2. Clean up emoji prefixes (üõí)')
  console.log('   3. Merge fragmented text nodes')
  console.log('')
  console.log('üìö Compound Word Protection:')
  console.log('   ‚úì „Çπ„Ç≥„Ç¢„Ç´„Éº„Éâ will remain intact (not split as „Çπ„Ç≥„Ç¢ + „Ç´„Éº„Éâ)')
  console.log('   ‚úì „Éó„É¨„Éº„É§„Éº will remain intact (not split as „Éó„É¨„Éº + „É§„Éº)')
  console.log('   ‚úì „Ç¥„É´„Éï„Ç°„Éº will remain intact (not split as „Ç¥„É´„Éï + „Ç°„Éº)')
  console.log('')

  const payload = await getPayload({ config: configPromise })

  try {
    // Get all posts
    const posts = await payload.find({
      collection: 'posts',
      limit: 100,
      depth: 0,
    })

    console.log(`üìä Processing ${posts.docs.length} posts...`)
    console.log('')

    let totalProcessed = 0
    let totalLinksRemoved = { internal: 0, affiliate: 0 }

    for (const post of posts.docs) {
      if (!post.content?.root) continue

      const linksBefore = countLinks(post.content)

      // Only process if there are links
      if (linksBefore.internal > 0 || linksBefore.affiliate > 0) {
        console.log(`üìù ${post.title || post.slug}`)
        console.log(`   Links before: Internal=${linksBefore.internal}, Affiliate=${linksBefore.affiliate}`)

        // Remove all links
        const cleanedContent = removeAllLinks(post.content)

        // Update the post
        await payload.update({
          collection: 'posts',
          id: post.id,
          data: {
            content: cleanedContent
          }
        })

        console.log(`   ‚úÖ Removed all links, text cleaned and merged`)

        totalProcessed++
        totalLinksRemoved.internal += linksBefore.internal
        totalLinksRemoved.affiliate += linksBefore.affiliate
      }
    }

    // Summary
    console.log('\n' + '=' .repeat(60))
    console.log('‚úÖ Cleanup Complete!')
    console.log(`   Posts processed: ${totalProcessed}`)
    console.log(`   Links removed:`)
    console.log(`     - Internal: ${totalLinksRemoved.internal}`)
    console.log(`     - Affiliate: ${totalLinksRemoved.affiliate}`)
    console.log(`     - Total: ${totalLinksRemoved.internal + totalLinksRemoved.affiliate}`)
    console.log('')
    console.log('üìå Next Steps:')
    console.log('   Run the improved linking scripts that respect compound words:')
    console.log('   1. pnpm tsx scripts/internal-links/apply-compound-safe-links.ts')
    console.log('   2. pnpm tsx scripts/affiliate-links/apply-compound-safe-links.ts')

  } catch (error) {
    console.error('‚ùå Error:', error)
    process.exit(1)
  } finally {
    await payload.db.destroy()
  }
}

main().catch(console.error)