#!/usr/bin/env tsx
/**
 * Build an index of posts with better Japanese phrase extraction
 */

import { getPayload } from 'payload'
import configPromise from '@payload-config'
import * as fs from 'fs/promises'
import * as path from 'path'
import * as crypto from 'crypto'

const OUTPUT_DIR = path.join(process.cwd(), 'data', 'internal-links')

interface PostIndex {
  id: string
  title: string
  slug: string
  excerpt?: string
  keywords: string[]
  anchorPhrases: string[]
  contentHash: string
  language: 'ja' | 'en'
  textContent: string
}

/**
 * Extract meaningful Japanese phrases (2-7 characters) that make good anchor text
 */
function extractNaturalPhrases(text: string): string[] {
  const phrases = new Set<string>()
  const cleanText = text
    .replace(/<[^>]*>/g, ' ')
    .replace(/[\n\r]+/g, ' ')
    .replace(/\s+/g, ' ')
    .trim()

  // Key golf-specific compound terms that should be preserved as phrases
  const golfPhrases = [
    // Technical terms
    '„Çπ„Ç§„É≥„Ç∞„Éó„É¨„Éº„É≥', '„Éï„Ç©„É≠„Éº„Çπ„É´„Éº', '„Éê„ÉÉ„ÇØ„Çπ„Ç§„É≥„Ç∞', '„ÉÄ„Ç¶„É≥„Çπ„Ç§„É≥„Ç∞',
    '„Ç§„É≥„Éë„ÇØ„Éà„Çæ„Éº„É≥', '„Çπ„Ç§„É≥„Ç∞„Ç¢„Éº„ÇØ', '„Ç¢„Éâ„É¨„Çπ„Éù„Ç∏„Ç∑„Éß„É≥', '„ÉÜ„Éº„ÇØ„Éê„ÉÉ„ÇØ',
    
    // Equipment terms  
    '„Éâ„É©„Ç§„Éê„Éº„Ç∑„Éß„ÉÉ„Éà', '„Ç¢„Ç§„Ç¢„É≥„Ç∑„Éß„ÉÉ„Éà', '„Éë„Çø„Éº„Çπ„Éà„É≠„Éº„ÇØ', '„Ç¶„Çß„ÉÉ„Ç∏„Ç∑„Éß„ÉÉ„Éà',
    '„Éï„Çß„Ç¢„Ç¶„Çß„Ç§„Ç¶„ÉÉ„Éâ', '„É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£„ÇØ„É©„Éñ', '„Çµ„É≥„Éâ„Ç¶„Çß„ÉÉ„Ç∏', '„Éî„ÉÉ„ÉÅ„É≥„Ç∞„Ç¶„Çß„ÉÉ„Ç∏',
    
    // Course terms
    '„ÉÜ„Ç£„Éº„Ç∑„Éß„ÉÉ„Éà', '„Ç¢„Éó„É≠„Éº„ÉÅ„Ç∑„Éß„ÉÉ„Éà', '„Éê„É≥„Ç´„Éº„Ç∑„Éß„ÉÉ„Éà', '„Ç∞„É™„Éº„É≥Âë®„Çä',
    '„É©„Éï„Åã„Çâ„ÅÆ', '„Éï„Çß„Ç¢„Ç¶„Çß„Ç§„Åã„Çâ', '„Éî„É≥„Éù„Ç∏„Ç∑„Éß„É≥', '„Ç´„ÉÉ„Éó„Åæ„Åß',
    
    // Practice terms
    '„Éü„É©„Éº„Éâ„É™„É´', 'Á¥†ÊåØ„ÇäÁ∑¥Áøí', '„Éë„ÉÉ„ÉÜ„Ç£„É≥„Ç∞Á∑¥Áøí', '„Ç¢„É©„Ç§„É°„É≥„ÉàÁ¢∫Ë™ç',
    '„Ç∞„É™„ÉÉ„ÉóÁ¢∫Ë™ç', '„Çπ„Çø„É≥„ÇπÂπÖ', '„Éú„Éº„É´‰ΩçÁΩÆ', '‰ΩìÈáçÁßªÂãï',
    
    // Common golf phrases
    '„Ç¥„É´„Éï„Çπ„Ç§„É≥„Ç∞', '„Ç¥„É´„Éï„ÇØ„É©„Éñ', '„Ç¥„É´„Éï„Éú„Éº„É´', '„Ç¥„É´„Éï„Ç≥„Éº„Çπ',
    '„Ç¥„É´„ÉïÁ∑¥Áøí', '„Ç¥„É´„Éï„É¨„ÉÉ„Çπ„É≥', '„Ç¥„É´„Éï„É´„Éº„É´', '„Ç¥„É´„Éï„Éû„Éä„Éº',
    
    // Score/play terms
    '„Çπ„Ç≥„Ç¢„É°„Ç§„ÇØ', '„Ç≥„Éº„Çπ„Éû„Éç„Ç∏„É°„É≥„Éà', '„ÇØ„É©„ÉñÈÅ∏Êäû', '„Ç∑„Éß„ÉÉ„ÉàÈÅ∏Êäû',
    'È£õË∑ùÈõ¢„Ç¢„ÉÉ„Éó', 'ÊñπÂêëÊÄßÂêë‰∏ä', '„Éü„Çπ„Ç∑„Éß„ÉÉ„Éà', '„Éä„Ç§„Çπ„Ç∑„Éß„ÉÉ„Éà',
    
    // Mental/strategy terms
    '„Éó„É¨„Ç∑„Éß„ÉÉ„Éà„É´„Éº„ÉÜ„Ç£„É≥', '„Ç≥„Éº„ÇπÊà¶Áï•', '„É°„É≥„Çø„É´„Ç≤„Éº„É†', '„Éó„É¨„ÉÉ„Ç∑„É£„ÉºÂØæÂá¶',
    '„É™„Ç∫„É†„Å®„ÉÜ„É≥„Éù', '„Çπ„Ç§„É≥„Ç∞„ÉÜ„É≥„Éù', '„Çø„Ç§„Éü„É≥„Ç∞Ë™øÊï¥', 'ÈõÜ‰∏≠ÂäõÂêë‰∏ä',
    
    // Beginner terms
    'ÂàùÂøÉËÄÖÂêë„Åë', 'ÂàùÂøÉËÄÖ„Ç¥„É´„Éï„Ç°„Éº', 'Âü∫Êú¨„Çπ„Ç§„É≥„Ç∞', 'Âü∫Êú¨„Ç∞„É™„ÉÉ„Éó',
    'Âü∫Êú¨„Çπ„Çø„É≥„Çπ', 'Âü∫Êú¨„Ç¢„Éâ„É¨„Çπ', 'Á∑¥ÁøíÊñπÊ≥ï', '‰∏äÈÅîÊñπÊ≥ï'
  ]
  
  // First, find all the predefined golf phrases
  for (const phrase of golfPhrases) {
    if (cleanText.includes(phrase)) {
      phrases.add(phrase)
    }
  }
  
  // Natural Japanese phrase patterns (looking for meaningful combinations)
  const patterns = [
    // Compound nouns with „ÅÆ particle (possessive/descriptive)
    /([„ÅÅ-„Çì„Ç°-„É∂„Éº‰∏Ä-Èæ†]{2,4})„ÅÆ([„ÅÅ-„Çì„Ç°-„É∂„Éº‰∏Ä-Èæ†]{2,4})/g,
    
    // Technical golf terms (katakana + kanji combinations)
    /[„Ç°-„É∂„Éº]{3,6}[‰∏Ä-Èæ†]{1,3}/g,
    
    // Action phrases (verb stem + noun)
    /([‰∏Ä-Èæ†]{1,3}[„Çä„ÅÑ„Åç„Åó„Å°„Å´„Åø])([‰∏Ä-Èæ†„Ç°-„É∂„Éº]{2,4})/g,
    
    // Method/technique phrases („ÄúÊñπ, „ÄúÊ≥ï)
    /[‰∏Ä-Èæ†„Ç°-„É∂„Éº]{2,5}[ÊñπÊ≥ï]/g,
    
    // Number + counter + noun patterns
    /[0-9Ôºê-Ôºô]{1,2}[„Å§ÂÄãÊú¨Áï™Â∫¶%ÔºÖ][„ÅÆ„Å®]?[„ÅÅ-„Çì„Ç°-„É∂„Éº‰∏Ä-Èæ†]{2,4}/g,
    
    // Common error/mistake patterns
    /[‰∏Ä-Èæ†]{2,4}„Éü„Çπ/g,
    /ÈñìÈÅï„Å£„Åü[‰∏Ä-Èæ†„Ç°-„É∂„Éº]{2,5}/g,
    /Ê≠£„Åó„ÅÑ[‰∏Ä-Èæ†„Ç°-„É∂„Éº]{2,5}/g,
    
    // Percentage patterns (for statistics)
    /[0-9Ôºê-Ôºô]{2,3}[%ÔºÖ]„ÅÆ[„ÅÅ-„Çì„Ç°-„É∂„Éº‰∏Ä-Èæ†]{2,5}/g,
    
    // Cost/price patterns
    /[0-9Ôºê-Ôºô]+‰∏áÂÜÜ„ÅÆ[‰∏Ä-Èæ†„Ç°-„É∂„Éº]{2,5}/g
  ]
  
  for (const pattern of patterns) {
    let match
    const patternCopy = new RegExp(pattern.source, pattern.flags)
    while ((match = patternCopy.exec(cleanText)) !== null) {
      const phrase = match[0].trim()
      // Filter for natural phrase length (3-12 characters)
      if (phrase.length >= 3 && phrase.length <= 12) {
        // Avoid phrases that are just particles or too generic
        if (!/^[„ÅÆ„Åå„Çí„ÅØ„Åß„Å´„Å∏„Å®„ÇÇ]+$/.test(phrase)) {
          phrases.add(phrase)
        }
      }
    }
  }
  
  // Extract meaningful segments between punctuation
  const segments = cleanText.split(/[„ÄÇ„ÄÅÔºÅÔºü„Äå„Äç„Äé„ÄèÔºàÔºâ]/g)
  for (const segment of segments) {
    const trimmed = segment.trim()
    // Look for complete meaningful phrases
    if (trimmed.length >= 4 && trimmed.length <= 10) {
      // Must contain substantial content (kanji or katakana)
      if (/[‰∏Ä-Èæ†„Ç°-„É∂„Éº]{3,}/.test(trimmed)) {
        // Avoid pure hiragana (usually particles/helpers)
        if (!/^[„ÅÅ-„Çì]+$/.test(trimmed)) {
          phrases.add(trimmed)
        }
      }
    }
  }
  
  // Return diverse set of phrases, prioritizing longer ones
  return Array.from(phrases)
    .sort((a, b) => b.length - a.length) // Longer phrases first
    .slice(0, 100) // Limit to top 100 phrases
}

/**
 * Extract text content from Lexical editor format
 */
function extractTextFromContent(content: any): string {
  if (!content?.root?.children) return ''
  
  const texts: string[] = []
  
  function extractFromNode(node: any): string {
    if (node.type === 'text') return node.text || ''
    if (node.type === 'link' && node.children) {
      return node.children.map(extractFromNode).join('')
    }
    if (node.children) {
      return node.children.map(extractFromNode).join(' ')
    }
    return ''
  }
  
  for (const child of content.root.children) {
    texts.push(extractFromNode(child))
  }
  
  return texts.join(' ')
}

/**
 * Detect language of text
 */
function detectLanguage(text: string): 'ja' | 'en' {
  const japaneseChars = text.match(/[„ÅÅ-„Çì„Ç°-„É∂„Éº‰∏Ä-Èæ†]/g) || []
  const englishChars = text.match(/[a-zA-Z]/g) || []
  return japaneseChars.length > englishChars.length ? 'ja' : 'en'
}

/**
 * Generate content hash
 */
function generateContentHash(content: string): string {
  return crypto.createHash('md5').update(content).digest('hex')
}

async function buildIndex() {
  console.log('Building improved post index for internal linking...')
  
  const payload = await getPayload({ config: configPromise })
  
  try {
    // Fetch all published posts
    const { docs: posts } = await payload.find({
      collection: 'posts',
      limit: 1000,
      where: {
        _status: { equals: 'published' }
      },
      depth: 1 // Include related fields
    })
    
    console.log(`Found ${posts.length} published posts`)
    
    const indexedPosts: PostIndex[] = []
    
    for (const post of posts) {
      const textContent = extractTextFromContent(post.content)
      const language = detectLanguage(textContent)
      
      // Extract anchor phrases - focus on natural multi-word phrases
      const anchorPhrases = language === 'ja' 
        ? extractNaturalPhrases(textContent)
        : [] // Skip English posts
      
      // Extract keywords from various sources
      const keywords: Set<string> = new Set()
      
      // Add title words
      if (post.title) {
        const titlePhrases = extractNaturalPhrases(post.title)
        titlePhrases.forEach(phrase => keywords.add(phrase))
      }
      
      // Add SEO keywords
      if (post.meta?.keywords) {
        post.meta.keywords.split(',').forEach((kw: string) => {
          const cleaned = kw.trim()
          if (cleaned.length >= 2) keywords.add(cleaned)
        })
      }
      
      // Add category names
      if (post.categories && Array.isArray(post.categories)) {
        for (const cat of post.categories) {
          if (typeof cat === 'object' && cat.title) {
            keywords.add(cat.title)
          }
        }
      }
      
      const indexed: PostIndex = {
        id: String(post.id),
        title: post.title || '',
        slug: post.slug || '',
        excerpt: post.excerpt || '',
        keywords: Array.from(keywords),
        anchorPhrases: anchorPhrases,
        contentHash: generateContentHash(textContent),
        language,
        textContent: textContent.substring(0, 5000) // Store first 5000 chars for reference
      }
      
      indexedPosts.push(indexed)
      console.log(`‚úì Indexed: ${post.title} (${anchorPhrases.length} phrases)`)
    }
    
    // Create output directory
    await fs.mkdir(OUTPUT_DIR, { recursive: true })
    
    // Save index
    const outputPath = path.join(OUTPUT_DIR, 'posts-index.json')
    await fs.writeFile(
      outputPath,
      JSON.stringify({ posts: indexedPosts, timestamp: new Date().toISOString() }, null, 2)
    )
    
    console.log('\n‚úÖ Index built successfully!')
    console.log(`üìÅ Saved to: ${outputPath}`)
    console.log(`üìä Total posts indexed: ${indexedPosts.length}`)
    
    // Statistics
    const japanesePosts = indexedPosts.filter(p => p.language === 'ja').length
    const englishPosts = indexedPosts.filter(p => p.language === 'en').length
    const avgPhrases = indexedPosts.reduce((sum, p) => sum + p.anchorPhrases.length, 0) / indexedPosts.length
    
    console.log('\nüìà Statistics:')
    console.log(`  - Japanese posts: ${japanesePosts}`)
    console.log(`  - English posts: ${englishPosts}`)
    console.log(`  - Avg anchor phrases per post: ${Math.round(avgPhrases)}`)
    
    // Show sample phrases
    const samplePost = indexedPosts.find(p => p.anchorPhrases.length > 10)
    if (samplePost) {
      console.log('\nüîç Sample phrases from "' + samplePost.title + '":')
      console.log('  ' + samplePost.anchorPhrases.slice(0, 10).join(', '))
    }
    
  } catch (error) {
    console.error('‚ùå Error building index:', error)
    process.exit(1)
  }
  
  process.exit(0)
}

buildIndex().catch(console.error)