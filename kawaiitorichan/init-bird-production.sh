#!/bin/sh
# Production initialization script for bird theme (uses SQL directly)

echo "ü¶ú Initializing Kawaii Bird Production Content..."

# Parse database URL
if [ -n "$DATABASE_URI" ]; then
  export PGUSER=$(echo $DATABASE_URI | sed -n 's/.*:\/\/\([^:]*\):.*/\1/p')
  export PGPASSWORD=$(echo $DATABASE_URI | sed -n 's/.*:\/\/[^:]*:\([^@]*\)@.*/\1/p')
  export PGHOST=$(echo $DATABASE_URI | sed -n 's/.*@\([^:]*\):.*/\1/p')
  export PGPORT=$(echo $DATABASE_URI | sed -n 's/.*:\([0-9]*\)\/.*/\1/p')
  export PGDATABASE=$(echo $DATABASE_URI | sed -n 's/.*\/\([^?]*\).*/\1/p')

  echo "üìä Applying bird content to database..."
  echo "   Host: $PGHOST"
  echo "   Database: $PGDATABASE"

  # TRY QUICK IMPORT FIRST FOR CLEAN SETUP WITH SAMPLE DATA
  if [ -f quick-import.sql ]; then
    echo "üöÄ RUNNING QUICK IMPORT - Creating tables and sample posts..."
    psql -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d "$PGDATABASE" -f quick-import.sql 2>&1

    # Check if it worked
    POST_COUNT=$(psql -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d "$PGDATABASE" -tAc "SELECT COUNT(*) FROM posts" 2>/dev/null || echo "0")
    CAT_COUNT=$(psql -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d "$PGDATABASE" -tAc "SELECT COUNT(*) FROM categories" 2>/dev/null || echo "0")

    if [ "$POST_COUNT" -gt "0" ]; then
      echo "‚úÖ QUICK IMPORT SUCCESS: $POST_COUNT posts, $CAT_COUNT categories created!"
      echo "üåê Kawaii Bird production initialization complete!"
      exit 0
    else
      echo "‚ö†Ô∏è Quick import didn't create posts, falling back to regular initialization..."
    fi
  else
    echo "‚ö†Ô∏è quick-import.sql not found, creating it inline..."

    # Create quick-import.sql inline if it doesn't exist
    cat > quick-import.sql <<'EOF'
-- Quick import script for Dokploy deployment
DROP TABLE IF EXISTS posts_rels CASCADE;
DROP TABLE IF EXISTS posts CASCADE;
DROP TABLE IF EXISTS categories CASCADE;
DROP TABLE IF EXISTS media CASCADE;
DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS header CASCADE;
DROP TABLE IF EXISTS footer CASCADE;

CREATE TABLE users (
  id serial PRIMARY KEY,
  email varchar NOT NULL,
  created_at timestamp DEFAULT now(),
  updated_at timestamp DEFAULT now()
);

CREATE TABLE categories (
  id serial PRIMARY KEY,
  title varchar NOT NULL,
  slug varchar NOT NULL UNIQUE,
  parent_id integer,
  created_at timestamp DEFAULT now(),
  updated_at timestamp DEFAULT now()
);

CREATE TABLE media (
  id serial PRIMARY KEY,
  filename varchar,
  url varchar,
  created_at timestamp DEFAULT now(),
  updated_at timestamp DEFAULT now()
);

CREATE TABLE posts (
  id serial PRIMARY KEY,
  title varchar NOT NULL,
  slug varchar NOT NULL UNIQUE,
  excerpt text,
  language varchar,
  hero_image_id integer,
  hero_image_alt varchar,
  content jsonb,
  meta_title varchar,
  meta_image_id integer,
  meta_description varchar,
  meta_keywords varchar,
  meta_focus_keyphrase varchar,
  wordpress_metadata_original_author varchar,
  wordpress_metadata_original_date timestamp,
  wordpress_metadata_modified_date timestamp,
  wordpress_metadata_status varchar,
  wordpress_metadata_enable_comments boolean,
  _status varchar DEFAULT 'published',
  published_at timestamp DEFAULT now(),
  created_at timestamp DEFAULT now() NOT NULL,
  updated_at timestamp DEFAULT now() NOT NULL
);

CREATE TABLE posts_rels (
  id serial PRIMARY KEY,
  parent_id integer,
  path varchar,
  category_id integer
);

CREATE TABLE header (
  id serial PRIMARY KEY,
  created_at timestamp DEFAULT now(),
  updated_at timestamp DEFAULT now()
);

CREATE TABLE footer (
  id serial PRIMARY KEY,
  created_at timestamp DEFAULT now(),
  updated_at timestamp DEFAULT now()
);

INSERT INTO users (email) VALUES ('admin@example.com');

INSERT INTO categories (title, slug) VALUES
  ('„Çª„Ç≠„Çª„Ç§„Ç§„É≥„Ç≥', 'budgerigar'),
  ('„Ç≥„Ç∂„ÇØ„É©„Ç§„É≥„Ç≥', 'lovebird'),
  ('„Ç™„Ç´„É°„Ç§„É≥„Ç≥', 'cockatiel');

INSERT INTO posts (title, slug, excerpt, content, _status, published_at, meta_title, meta_description) VALUES
  ('„Çª„Ç≠„Çª„Ç§„Ç§„É≥„Ç≥„ÅÆÈ£º„ÅÑÊñπÂÖ•ÈñÄ', 'budgerigar-care-guide',
   '„Çª„Ç≠„Çª„Ç§„Ç§„É≥„Ç≥„ÅØÂàùÂøÉËÄÖ„Åß„ÇÇÈ£º„ÅÑ„ÇÑ„Åô„ÅÑÂ∞èÈ≥•„Åß„Åô„ÄÇ',
   '{"root":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","text":"„Çª„Ç≠„Çª„Ç§„Ç§„É≥„Ç≥„ÅØÂàùÂøÉËÄÖ„Åß„ÇÇÈ£º„ÅÑ„ÇÑ„Åô„ÅÑÂ∞èÈ≥•„Åß„Åô„ÄÇÊòé„Çã„ÅèÊ¥ªÁô∫„Å™ÊÄßÊ†º„Åß„ÄÅÈ£º„ÅÑ‰∏ª„Å®„ÅÆ„Ç≥„Éü„É•„Éã„Ç±„Éº„Ç∑„Éß„É≥„ÇÇÊ•Ω„Åó„ÇÅ„Åæ„Åô„ÄÇ"}]}]}}',
   'published', now(),
   '„Çª„Ç≠„Çª„Ç§„Ç§„É≥„Ç≥„ÅÆÈ£º„ÅÑÊñπÂÖ•ÈñÄ - „Åã„Çè„ÅÑ„ÅÑÂ∞èÈ≥•„Éñ„É≠„Ç∞',
   '„Çª„Ç≠„Çª„Ç§„Ç§„É≥„Ç≥„ÅÆÂü∫Êú¨ÁöÑ„Å™È£º„ÅÑÊñπ„ÇíÂàùÂøÉËÄÖÂêë„Åë„Å´Ëß£Ë™¨„Åó„Åæ„Åô„ÄÇ'),
  ('„Ç≥„Ç∂„ÇØ„É©„Ç§„É≥„Ç≥„ÅÆÁâπÂæ¥', 'lovebird-characteristics',
   '„Ç≥„Ç∂„ÇØ„É©„Ç§„É≥„Ç≥„ÅØÊÑõÊÉÖÊ∑±„ÅÑÂ∞èÈ≥•„Å®„Åó„Å¶Áü•„Çâ„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ',
   '{"root":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","text":"„Ç≥„Ç∂„ÇØ„É©„Ç§„É≥„Ç≥„ÅØÊÑõÊÉÖÊ∑±„ÅÑÂ∞èÈ≥•„Å®„Åó„Å¶Áü•„Çâ„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ„Éë„Éº„Éà„Éä„Éº„Å∏„ÅÆÊÑõÊÉÖ„ÅåÊ∑±„Åè„ÄÅ„É©„Éñ„Éê„Éº„Éâ„Å®„ÇÇÂëº„Å∞„Çå„Åæ„Åô„ÄÇ"}]}]}}',
   'published', now(),
   '„Ç≥„Ç∂„ÇØ„É©„Ç§„É≥„Ç≥„ÅÆÁâπÂæ¥ - „Åã„Çè„ÅÑ„ÅÑÂ∞èÈ≥•„Éñ„É≠„Ç∞',
   '„Ç≥„Ç∂„ÇØ„É©„Ç§„É≥„Ç≥„ÅÆÊÄßÊ†º„ÇÑÁâπÂæ¥„Å´„Å§„ÅÑ„Å¶Ë©≥„Åó„ÅèËß£Ë™¨„Åó„Åæ„Åô„ÄÇ'),
  ('„Ç™„Ç´„É°„Ç§„É≥„Ç≥„ÅÆ„Ç±„Ç¢', 'cockatiel-care',
   '„Ç™„Ç´„É°„Ç§„É≥„Ç≥„ÅØÈ†¨„ÅÆËµ§„ÅÑÊ®°Êßò„ÅåÁâπÂæ¥ÁöÑ„Åß„Åô„ÄÇ',
   '{"root":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","text":"„Ç™„Ç´„É°„Ç§„É≥„Ç≥„ÅØÈ†¨„ÅÆËµ§„ÅÑÊ®°Êßò„ÅåÁâπÂæ¥ÁöÑ„Åß„Åô„ÄÇÂÑ™„Åó„ÅÑÊÄßÊ†º„ÅßÂàùÂøÉËÄÖ„Å´„ÇÇ„Åä„Åô„Åô„ÇÅ„ÅÆÈ≥•„Åß„Åô„ÄÇ"}]}]}}',
   'published', now(),
   '„Ç™„Ç´„É°„Ç§„É≥„Ç≥„ÅÆ„Ç±„Ç¢ÊñπÊ≥ï - „Åã„Çè„ÅÑ„ÅÑÂ∞èÈ≥•„Éñ„É≠„Ç∞',
   '„Ç™„Ç´„É°„Ç§„É≥„Ç≥„ÅÆÊó•Â∏∏ÁöÑ„Å™„Ç±„Ç¢ÊñπÊ≥ï„Å´„Å§„ÅÑ„Å¶Ë™¨Êòé„Åó„Åæ„Åô„ÄÇ');

INSERT INTO posts_rels (parent_id, path, category_id) VALUES
  (1, 'categories', 1),
  (2, 'categories', 2),
  (3, 'categories', 3);

INSERT INTO header (id) VALUES (1);
INSERT INTO footer (id) VALUES (1);
EOF

    echo "‚úÖ Created quick-import.sql inline, now executing..."
    psql -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d "$PGDATABASE" -f quick-import.sql 2>&1

    # Check results
    POST_COUNT=$(psql -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d "$PGDATABASE" -tAc "SELECT COUNT(*) FROM posts" 2>/dev/null || echo "0")
    CAT_COUNT=$(psql -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d "$PGDATABASE" -tAc "SELECT COUNT(*) FROM categories" 2>/dev/null || echo "0")

    echo "‚úÖ INLINE QUICK IMPORT COMPLETE: $POST_COUNT posts, $CAT_COUNT categories"
    echo "üåê Kawaii Bird production initialization complete!"
    exit 0
  fi

  # Run SQL script - try full content first, fallback to basic
  if [ -f init-full-bird-content.sql ]; then
    echo "üìù Using full bird content initialization..."
    psql -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d "$PGDATABASE" -f init-full-bird-content.sql

    if [ $? -eq 0 ]; then
      echo "‚úÖ Full bird content initialized successfully!"
    else
      echo "‚ö†Ô∏è Failed to initialize full bird content (may already exist)"
    fi
  elif [ -f init-bird-content.sql ]; then
    echo "üìù Using basic bird content initialization..."
    psql -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d "$PGDATABASE" -f init-bird-content.sql

    if [ $? -eq 0 ]; then
      echo "‚úÖ Basic bird content initialized successfully!"
    else
      echo "‚ö†Ô∏è Failed to initialize bird content (may already exist)"
    fi
  else
    echo "‚ùå No SQL initialization scripts found"
  fi
else
  echo "‚ùå DATABASE_URI not set!"
  exit 1
fi

echo "üåê Kawaii Bird production initialization complete!"